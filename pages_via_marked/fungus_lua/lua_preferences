<h1 id="playerprefs">PlayerPrefs</h1>
<p>The <a href="http://docs.unity3d.com/ScriptReference/PlayerPrefs.html">Unity PlayerPrefs</a> system stores and accesses player preferences between game sessions.</p>
<h1 id="playerprefs-example">PlayerPrefs example</h1>
<p>Here&#39;s an example of using PlayerPrefs from Lua.</p>
<pre><code class="language-lua">-- Saving a value to preferences
playerprefs.SetInt(&quot;SaveName&quot;, 1)
playerprefs.Save()

-- Using a value from preferences
local v = playerprefs.GetInt(&quot;SaveName&quot;)
print(v) -- Will print out 1
</code></pre>
<h1 id="fungusprefs">FungusPrefs</h1>
<p>The FungusPrefs class is a wrapper around PlayerPrefs that adds support for save slots. </p>
<p>Basically, if you want to store simple values use PlayerPrefs. If you want to store values using multiple player profiles, you should use FungusPrefs. The slot variable is an integer [0..] and key is a string.</p>
<pre><code class="language-lua">-- Deletes all saved values for all slots.
prefs.DeleteAll()

-- Removes key and its value from this save slot.
prefs.DeleteKey(slot, key)

-- Returns the float value associated with this key in this save slot, it it exists.
prefs.GetFloat(slot, key, defaultValue)

-- Returns the int value associated with this key in this save slot, it it exists.
prefs.GetInt(slot, key, defaultValue)

-- Returns the string value associated with this key in this save slot, it it exists.
prefs.GetString(slot, key, defaultValue)

-- Returns true if the key exists in this save slot.
prefs.HasKey(slot, key)

-- Writes all modified prefences to disk.
prefs.Save()

-- Sets the value of the preference identified by key for this save slot.
prefs.SetFloat(slot, key, value)

-- Sets the value of the preference identified by key for this save slot.
prefs.SetInt(slot, key, value)

-- Sets the value of the preference identified by key for this save slot.
prefs.SetString(slot, key, value)

-- Returns the combined key used to identify a key within a save slot.
prefs.GetSlotKey(slot, key)
</code></pre>
