<h1 id="fungus-lua-module">Fungus Lua Module</h1>
<p>The Fungus Lua module provides handy functions for working with Lua, Unity and Fungus. It is located in FungusLua/Resources/Lua/Fungus.txt and is loaded automatically when you use the Lua Script component.</p>
<p>In this page we cover some of the more generic functionality in the module, other major features are described elsewhere in the documentation.</p>
<h1 id="inspecting-lua-objects">Inspecting Lua objects</h1>
<p>You can use Lua&#39;s built in print() function to get a basic description of any object printed to the console. When you want to get a more detailed description of an object, use inspect().</p>
<pre><code class="language-lua">-- Prints a short description of object v
print(v)

-- Prints a summary of object v in a human readable format.
inspect(v)
</code></pre>
<h1 id="running-unity-coroutines">Running Unity coroutines</h1>
<p>When you bind to a C# component using Lua Bindings, you can access any public method in the class. If a method returns IEnumerator then that method can be executed as a <a href="http://docs.unity3d.com/Manual/Coroutines.html">Unity coroutine</a>, which is a powerful way to run asynchronous code. </p>
<p>The runwait() function allows you to call a C# coroutine method from Lua which may take multiple frames to finish its work, and then carry on with the rest of the Lua code once that C# method has finished executing. This is how the say() function works for example.</p>
<p>This is the list of available functions for waiting and working with coroutines.</p>
<pre><code class="language-lua">-- Waits for a number of seconds, then continue execution of Lua script
wait(duration)

-- Waits until the Lua function provided returns true, or the timeout expires.
-- Returns true if the function succeeded, or false if the timeout expired
waitfor(fn, timeoutduration)

-- Run a C# coroutine and continue execution of Lua script
run(co)

-- Run a C# coroutine, wait until it completes, then continue execution of Lua script
runwait(co)
</code></pre>
<h1 id="globals-vs-table-mode">Globals vs Table mode</h1>
<p>The Fungus module can be used in three modes, controlled by the Fungus Module option in the LuaUtils component.  </p>
<ol>
<li>Use Global Variables: all module functions are mapped to global functions. This allows for convenient access, but it runs the risk that you might accidentally declare a variable with the same name as a Fungus module function.</li>
<li>Use Fungus Variable: all module functions are accessed through a global table called &#39;fungus&#39;. This gives a degree of namespace safety at the cost of more typing. </li>
<li>No Fungus Module: the Fungus module will not be registered. Used if you don&#39;t want to use the Fungus module.</li>
</ol>
<p>Options 1 and 2 are functionaly equivalent, it&#39;s just a matter of personal preference which you want to use.</p>
<pre><code class="language-lua">-- sub is a function in the Fungus module, mapped to a global variable

-- Use Global Variables
sub(&#39;a string&#39;)

-- Use Fungus Variable
fungus.sub(&#39;a string&#39;)
</code></pre>
